
.. _program_listing_file_smaug_utility_thread_pool.h:

Program Listing for File thread_pool.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_smaug_utility_thread_pool.h>` (``smaug/utility/thread_pool.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef _UTILITY_THREAD_POOL_H_
   #define _UTILITY_THREAD_POOL_H_
   
   #include <pthread.h>
   #include <vector>
   
   namespace smaug {
   
   class ThreadPool {
      public:
       ThreadPool(int nthreads);
       ~ThreadPool();
   
       typedef void* (*WorkerThreadFunc)(void*);
   
       int size() const { return workers.size(); }
   
       void initThreadPool();
   
       int dispatchThread(WorkerThreadFunc func, void* args);
   
       void joinThreadPool();
   
      protected:
       enum ThreadStatus { Uninitialized, Idle, Running };
   
       struct WorkerThread {
           WorkerThreadFunc func;
           void* args;
   
           pthread_t thread;
           pthread_mutex_t statusMutex;
           bool exit;
           bool valid;
           ThreadStatus status;
           pthread_cond_t wakeupCond;
           pthread_cond_t statusCond;
           int cpuid;
   
           WorkerThread() {
               func = NULL;
               args = NULL;
               exit = false;
               valid = false;
               status = Uninitialized;
               pthread_mutex_init(&statusMutex, NULL);
               pthread_cond_init(&wakeupCond, NULL);
               pthread_cond_init(&statusCond, NULL);
           }
       };
   
       struct ThreadInitArgs {
           WorkerThread* worker;
           pthread_mutex_t cpuidMutex;
           pthread_cond_t cpuidCond;
           int cpuid;
   
           ThreadInitArgs(WorkerThread* _worker) : worker(_worker) {
               pthread_mutex_init(&cpuidMutex, NULL);
               pthread_cond_init(&cpuidCond, NULL);
               cpuid = -1;
           }
       };
   
       static void* workerLoop(void* args);
   
       std::vector<WorkerThread> workers;
   };
   
   }  // namespace smaug
   
   #endif
